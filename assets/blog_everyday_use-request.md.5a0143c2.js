import{_ as s,o as a,c as n,a as p}from"./app.ed2a374b.js";const C=JSON.parse('{"title":"React Hook - useRequest","description":"","frontmatter":{},"headers":[],"relativePath":"blog/everyday/use-request.md","lastUpdated":1679813736000}'),l={name:"blog/everyday/use-request.md"},o=p(`<h1 id="react-hook-userequest" tabindex="-1">React Hook - useRequest <a class="header-anchor" href="#react-hook-userequest" aria-hidden="true">#</a></h1><h2 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-hidden="true">#</a></h2><p>实现这个 Hook 的目的是为了<strong>减少 React 项目中数据请求编写的重复代码。</strong></p><p>本文将以我的项目为例（👀 每个项目的数据请求风格可能不同，但大致思路相同）</p><p>下面标记的代码块就是数据请求编写的重复代码。</p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ab59a2cdaaff4da5a0926bc7f4f498a8~tplv-k3u1fbpfcp-zoom-1.image" alt="image-20220812212303141" width="70%"><p>简单概括为以下几类</p><ul><li>请求返回数据的声明和更新；</li><li>加载的 loading 的声明和更新；</li><li>try...catch 错误捕获；</li><li>isSuccess 接口成功验证字段 （不同项目存在差异）；</li><li>......</li></ul><p>虽然日常业务开发 CV 就能解决 🤔，但是代码层面显得不够优雅 🐶。</p><p>于是我 Google 了一些社区的实现方案：</p><ul><li>官方推荐的 <a href="https://www.robinwieruch.de/react-hooks-fetch-data/" target="_blank" rel="noreferrer">How to fetch data with React Hooks</a> ；</li><li><a href="https://github.com/streamich/react-use" target="_blank" rel="noreferrer">react-use</a> 的 <a href="https://github.com/streamich/react-use/blob/master/docs/useAsync.md" target="_blank" rel="noreferrer">useAsync</a>，<a href="https://github.com/streamich/react-use/blob/master/docs/useAsyncFn.md" target="_blank" rel="noreferrer">useAsyncFn</a>；</li><li><a href="https://ahooks.js.org/" target="_blank" rel="noreferrer">ahooks</a> 的 <a href="https://ahooks.js.org/hooks/use-request/index" target="_blank" rel="noreferrer">useRequest</a> ；</li></ul><p>官方推荐网站提供很好的思路；</p><p>react-use 的 useAsync 只针对异步函数的处理；</p><p>ahooks 的 useRequest 已经非常成熟，可以直接引入使用，但也在于功能过于强大，有点杀鸡用牛刀意思 😄；</p><p>借鉴以上的实现方案后，针对自己的业务项目 <strong>定制</strong> 更 <strong>基础</strong> 的异步数据请求 Hook 。</p><p>一开始的方案存在一些坑，经过不断的优化迭代，得到了本文最终的方案，仅供掘友参考。</p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/68b4938852844b4c8f2e6c33ddf2a51e~tplv-k3u1fbpfcp-zoom-1.image" alt="BCBAA8AC-3BAB-4C2E-8C11-D2E93975C7D9" width="70%"><h2 id="hook-需求" tabindex="-1">Hook 需求 <a class="header-anchor" href="#hook-需求" aria-hidden="true">#</a></h2><p>🟢 首先我们要明确从 Hook 中获取什么</p><ul><li><strong>data</strong>：请求结果；</li><li><strong>loading</strong>：用于表示正在请求数据；</li><li><strong>run</strong>：触发函数；</li><li><strong>setData</strong>：二次修改；（这个可以不需要返回）</li><li><strong>error</strong>：错误信息；（👀 大部分实现方案会以 isError 状态的形式抛出，由于我的项目对于错误进行了单独的处理，这里就不需要了）</li></ul><p>🟢 其次是提取 Hook 公共逻辑</p><ul><li>接收异步请求函数</li><li>请求成功后回调函数</li><li>使用 try...catch 捕获错误</li><li>根据接口的返回的 isSuccess 字段判断</li></ul><p>🟢 最后使用 TS，类型推导</p><h2 id="hook-技术方案" tabindex="-1">Hook 技术方案 <a class="header-anchor" href="#hook-技术方案" aria-hidden="true">#</a></h2><p>📂 services/api/../index.ts</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark-dimmed"><code><span class="line"><span style="color:#768390;">/**</span></span>
<span class="line"><span style="color:#768390;"> * </span><span style="color:#F47067;">@description</span><span style="color:#768390;"> 查询</span></span>
<span class="line"><span style="color:#768390;"> * </span><span style="color:#F47067;">@export</span></span>
<span class="line"><span style="color:#768390;"> * </span><span style="color:#F47067;">@param</span><span style="color:#768390;"> </span><span style="color:#F69D50;">{SearchProps}</span><span style="color:#768390;"> </span><span style="color:#ADBAC7;">params</span></span>
<span class="line"><span style="color:#768390;"> * </span><span style="color:#F47067;">@returns</span><span style="color:#768390;"> </span><span style="color:#F69D50;">{*}</span><span style="color:#768390;">  {Promise&lt;ResponseProps&lt;ListProps&gt;&gt;}</span></span>
<span class="line"><span style="color:#768390;"> */</span></span>
<span class="line"><span style="color:#F47067;">export</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">async</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">function</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">apiSearch</span><span style="color:#ADBAC7;">(</span><span style="color:#F69D50;">params</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">SearchProps</span><span style="color:#ADBAC7;">)</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">Promise</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">ResponseProps</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">ListProps</span><span style="color:#ADBAC7;">[]&gt;&gt; {</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> { </span><span style="color:#6CB6FF;">data</span><span style="color:#ADBAC7;"> } </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">await</span><span style="color:#ADBAC7;"> http.</span><span style="color:#DCBDFB;">get</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&#39;/.../List&#39;</span><span style="color:#ADBAC7;">, params);</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> data;</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span></code></pre></div><p>🟢 封装异步请求函数，这样方便接口管理。</p><h3 id="封装" tabindex="-1">封装 <a class="header-anchor" href="#封装" aria-hidden="true">#</a></h3><p>📂 hooks\\common\\useRequest.ts</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark-dimmed"><code><span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> { ResponseProps } </span><span style="color:#F47067;">from</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&#39;@types&#39;</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> { useCallback, useState } </span><span style="color:#F47067;">from</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&#39;react&#39;</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F47067;">interface</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">UseRequestReturnType</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">P</span><span style="color:#ADBAC7;">, </span><span style="color:#F69D50;">T</span><span style="color:#ADBAC7;">&gt; {</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#768390;">/**</span></span>
<span class="line"><span style="color:#768390;">   * </span><span style="color:#F47067;">@description</span><span style="color:#768390;"> service 返回的数据</span></span>
<span class="line"><span style="color:#768390;">   * </span><span style="color:#F47067;">@type</span><span style="color:#768390;"> </span><span style="color:#F69D50;">{T}</span></span>
<span class="line"><span style="color:#768390;">   */</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F69D50;">data</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">T</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#768390;">/**</span></span>
<span class="line"><span style="color:#768390;">   * </span><span style="color:#F47067;">@description</span><span style="color:#768390;"> service 是否正在执行</span></span>
<span class="line"><span style="color:#768390;">   * </span><span style="color:#F47067;">@type</span><span style="color:#768390;"> </span><span style="color:#F69D50;">{boolean}</span></span>
<span class="line"><span style="color:#768390;">   */</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F69D50;">loading</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">boolean</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#768390;">/**</span></span>
<span class="line"><span style="color:#768390;">   * </span><span style="color:#F47067;">@description</span><span style="color:#768390;"> 触发 service 执行，参数会传递给 service</span></span>
<span class="line"><span style="color:#768390;">   */</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#DCBDFB;">run</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> (</span><span style="color:#F69D50;">params</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">P</span><span style="color:#ADBAC7;">) </span><span style="color:#F47067;">=&gt;</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">void</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#768390;">/**</span></span>
<span class="line"><span style="color:#768390;">   * </span><span style="color:#F47067;">@description</span><span style="color:#768390;"> setData</span></span>
<span class="line"><span style="color:#768390;">   * </span><span style="color:#F47067;">@type</span><span style="color:#768390;"> </span><span style="color:#F69D50;">{React.Dispatch&lt;React.SetStateAction&lt;T&gt;&gt;}</span></span>
<span class="line"><span style="color:#768390;">   */</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F69D50;">setData</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">React</span><span style="color:#ADBAC7;">.</span><span style="color:#F69D50;">Dispatch</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">React</span><span style="color:#ADBAC7;">.</span><span style="color:#F69D50;">SetStateAction</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">T</span><span style="color:#ADBAC7;">&gt;&gt;;</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#768390;">// 初始数据</span></span>
<span class="line"><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">initData</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">any</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#768390;">/**</span></span>
<span class="line"><span style="color:#768390;"> * </span><span style="color:#F47067;">@description</span><span style="color:#768390;"> 异步数据请求的 Hook</span></span>
<span class="line"><span style="color:#768390;"> * </span><span style="color:#F47067;">@export</span></span>
<span class="line"><span style="color:#768390;"> * </span><span style="color:#F47067;">@template</span><span style="color:#768390;"> </span><span style="color:#ADBAC7;">P</span><span style="color:#768390;"> 入参类型</span></span>
<span class="line"><span style="color:#768390;"> * </span><span style="color:#F47067;">@template</span><span style="color:#768390;"> </span><span style="color:#ADBAC7;">T</span><span style="color:#768390;"> 出参类型</span></span>
<span class="line"><span style="color:#768390;"> * </span><span style="color:#F47067;">@param</span><span style="color:#768390;"> </span><span style="color:#F69D50;">{(params: P) =&gt; Promise&lt;ResponseProps&lt;T&gt;&gt;}</span><span style="color:#768390;"> </span><span style="color:#ADBAC7;">apiService</span><span style="color:#768390;"> service</span></span>
<span class="line"><span style="color:#768390;"> * </span><span style="color:#F47067;">@param</span><span style="color:#768390;"> </span><span style="color:#F69D50;">{(result: T) =&gt; void}</span><span style="color:#768390;"> </span><span style="color:#ADBAC7;">[onSuccess]</span><span style="color:#768390;"> service resolve 时触发 参数为 data</span></span>
<span class="line"><span style="color:#768390;"> * </span><span style="color:#F47067;">@returns</span><span style="color:#768390;"> </span><span style="color:#F69D50;">{*}</span><span style="color:#768390;">  {UseRequestReturnType}</span></span>
<span class="line"><span style="color:#768390;"> */</span></span>
<span class="line"><span style="color:#F47067;">export</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">function</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">useRequest</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">P</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">any</span><span style="color:#ADBAC7;">, </span><span style="color:#F69D50;">T</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">any</span><span style="color:#ADBAC7;">&gt;(</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#DCBDFB;">apiService</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> (</span><span style="color:#F69D50;">params</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">P</span><span style="color:#ADBAC7;">) </span><span style="color:#F47067;">=&gt;</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">Promise</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">ResponseProps</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">T</span><span style="color:#ADBAC7;">&gt;&gt;,</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#DCBDFB;">onSuccess</span><span style="color:#F47067;">?:</span><span style="color:#ADBAC7;"> (</span><span style="color:#F69D50;">result</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">T</span><span style="color:#ADBAC7;">) </span><span style="color:#F47067;">=&gt;</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">void</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">)</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">UseRequestReturnType</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">P</span><span style="color:#ADBAC7;">, </span><span style="color:#F69D50;">T</span><span style="color:#ADBAC7;">&gt; {</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> [</span><span style="color:#6CB6FF;">data</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">setData</span><span style="color:#ADBAC7;">] </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">useState</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">T</span><span style="color:#ADBAC7;">&gt;(initData);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> [</span><span style="color:#6CB6FF;">loading</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">setLoading</span><span style="color:#ADBAC7;">] </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">useState</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">false</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">run</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">useCallback</span><span style="color:#ADBAC7;">(</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">async</span><span style="color:#ADBAC7;"> (</span><span style="color:#F69D50;">params</span><span style="color:#ADBAC7;">) </span><span style="color:#F47067;">=&gt;</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">      </span><span style="color:#DCBDFB;">setLoading</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">true</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">      </span><span style="color:#F47067;">try</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> { </span><span style="color:#6CB6FF;">isSuccess</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">result</span><span style="color:#ADBAC7;"> } </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">await</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">apiService</span><span style="color:#ADBAC7;">(params);</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (isSuccess) {</span></span>
<span class="line"><span style="color:#ADBAC7;">          </span><span style="color:#DCBDFB;">setData</span><span style="color:#ADBAC7;">(result);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">          </span><span style="color:#768390;">// 处理 Modal 保存成功后，调用 hideModal()，组件销毁前先完成 loading state 更新</span></span>
<span class="line"><span style="color:#ADBAC7;">          </span><span style="color:#768390;">// 避免 dev server Warning：Can&#39;t perform a React state update on an unmounted component.</span></span>
<span class="line"><span style="color:#ADBAC7;">          </span><span style="color:#DCBDFB;">setLoading</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">false</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">          onSuccess </span><span style="color:#F47067;">&amp;&amp;</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">onSuccess</span><span style="color:#ADBAC7;">(result);</span></span>
<span class="line"><span style="color:#ADBAC7;">        }</span></span>
<span class="line"><span style="color:#ADBAC7;">      } </span><span style="color:#F47067;">catch</span><span style="color:#ADBAC7;"> (error) {</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#768390;">// 错误信息由 services/request message.error() 抛出</span></span>
<span class="line"><span style="color:#ADBAC7;">        console.</span><span style="color:#DCBDFB;">log</span><span style="color:#ADBAC7;">(error);</span></span>
<span class="line"><span style="color:#ADBAC7;">      }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">      </span><span style="color:#DCBDFB;">setLoading</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">false</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"><span style="color:#ADBAC7;">    },</span></span>
<span class="line"><span style="color:#ADBAC7;">    [apiService, onSuccess],</span></span>
<span class="line"><span style="color:#ADBAC7;">  );</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">    data,</span></span>
<span class="line"><span style="color:#ADBAC7;">    loading,</span></span>
<span class="line"><span style="color:#ADBAC7;">    run,</span></span>
<span class="line"><span style="color:#ADBAC7;">    setData,</span></span>
<span class="line"><span style="color:#ADBAC7;">  };</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span></code></pre></div><p>🟢 使用泛型传递类型参数，方便类型推导。</p><p>🟢 这里使用了两次 <code>setLoading(false)</code> ，在 <code>onSuccess</code> 之前使用是因为，项目存在一种业务情况，在“保存完成”后关闭 Modal，但是<code>hideModal()</code> 是通过 <code>onSuccess</code> 调用的，所以在 Modal 关闭之后，再去更新 state，控制台就会报 Warning， React 会提醒开发者不要在卸载的组件执行状态更新。</p><p>🟢 上面有提到项目对错误信息有统一处理，所以不需要抛出 error。</p><p>🟢 返回值是以对象的形式，当然也可以像 State Hook 一样以数组的形式返回。其实也就是解构赋值语法对于数组和对象的区别，这里个人使用习惯。</p><ul><li>解构数组：必须按顺序获取值，直接命名；</li><li>解构对象：必须使用返回对象对应的字段获取值，解构命名；</li></ul><h3 id="使用" tabindex="-1">使用 <a class="header-anchor" href="#使用" aria-hidden="true">#</a></h3><p>📂 src/../component.tsx</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark-dimmed"><code><span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#768390;">//...</span></span>
<span class="line"><span style="color:#ADBAC7;">  useRequest,</span></span>
<span class="line"><span style="color:#ADBAC7;">} </span><span style="color:#F47067;">from</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&#39;hooks&#39;</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#768390;">//...</span></span>
<span class="line"><span style="color:#ADBAC7;">  apiSearch,</span></span>
<span class="line"><span style="color:#ADBAC7;">  apiSave,</span></span>
<span class="line"><span style="color:#ADBAC7;">} </span><span style="color:#F47067;">from</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&#39;services/api&#39;</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#768390;">//...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#768390;">// 声明查询 request</span></span>
<span class="line"></span>
<span class="line"><span style="color:#768390;">// 不需要处理返回数据的情况，直接使用抛出的 data</span></span>
<span class="line"><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> { </span><span style="color:#F69D50;">data</span><span style="color:#ADBAC7;">: </span><span style="color:#6CB6FF;">dataList</span><span style="color:#ADBAC7;">, </span><span style="color:#F69D50;">run</span><span style="color:#ADBAC7;">: </span><span style="color:#6CB6FF;">runSearch</span><span style="color:#ADBAC7;">, </span><span style="color:#F69D50;">loading</span><span style="color:#ADBAC7;">: </span><span style="color:#6CB6FF;">searchBtnLoading</span><span style="color:#ADBAC7;"> } </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">useRequest</span><span style="color:#ADBAC7;">(apiSearch);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#768390;">// 需要处理返回数据的情况，在 onSuccess 里获取 result</span></span>
<span class="line"><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F69D50;">run</span><span style="color:#ADBAC7;">: </span><span style="color:#6CB6FF;">runSearch</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F69D50;">loading</span><span style="color:#ADBAC7;">: </span><span style="color:#6CB6FF;">searchBtnLoading</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F69D50;">setData</span><span style="color:#ADBAC7;">: </span><span style="color:#6CB6FF;">setDataList</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">} </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">useRequest</span><span style="color:#ADBAC7;">(apiSearch, (</span><span style="color:#F69D50;">result</span><span style="color:#ADBAC7;">) </span><span style="color:#F47067;">=&gt;</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#768390;">// 处理出参</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">tmp</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">format</span><span style="color:#ADBAC7;">(result);</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#DCBDFB;">setDataList</span><span style="color:#ADBAC7;">(tmp);</span></span>
<span class="line"><span style="color:#ADBAC7;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#768390;">// 声明保存 request</span></span>
<span class="line"><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> { </span><span style="color:#F69D50;">loading</span><span style="color:#ADBAC7;">: </span><span style="color:#6CB6FF;">saveBtnLoading</span><span style="color:#ADBAC7;">, </span><span style="color:#F69D50;">run</span><span style="color:#ADBAC7;">: </span><span style="color:#6CB6FF;">runSave</span><span style="color:#ADBAC7;"> } </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">useRequest</span><span style="color:#ADBAC7;">(apiSave, () </span><span style="color:#F47067;">=&gt;</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#768390;">//...</span></span>
<span class="line"><span style="color:#ADBAC7;">  message.</span><span style="color:#DCBDFB;">success</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&#39;保存成功&#39;</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"><span style="color:#ADBAC7;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#768390;">// 查询</span></span>
<span class="line"><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">onSearch</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> () </span><span style="color:#F47067;">=&gt;</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#768390;">// 处理入参</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#768390;">//...</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#DCBDFB;">runSearch</span><span style="color:#ADBAC7;">(params);</span></span>
<span class="line"><span style="color:#ADBAC7;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#768390;">// 保存</span></span>
<span class="line"><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">onSave</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> () </span><span style="color:#F47067;">=&gt;</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#768390;">// 处理入参</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#768390;">//...</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#DCBDFB;">runSave</span><span style="color:#ADBAC7;">(params);</span></span>
<span class="line"><span style="color:#ADBAC7;">};</span></span>
<span class="line"></span></code></pre></div><p>🟢 params ，result 都会有类型校验，这里也就体现出用 ts 的好处了。</p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-hidden="true">#</a></h2><p>大功告成，这样就可以通过 Hook 的方式去进行数据请求了，不需要 CV 重复的代码，代码结构也更 <strong>prettier</strong> ，这篇文章以我项目中自定义 Hook 的方案作为分享，有任何优化建议或者问题欢迎各位大佬评论区指出，如果本文的方案对你有些许帮助&amp;启发 。</p>`,41),e=[o];function t(c,r,y,A,D,i){return a(),n("div",null,e)}const F=s(l,[["render",t]]);export{C as __pageData,F as default};
