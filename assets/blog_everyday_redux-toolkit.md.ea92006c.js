import{_ as s,o as a,c as n,a as l}from"./app.5b5c79b2.js";const C=JSON.parse('{"title":"Redux Toolkit 使用技巧","description":"","frontmatter":{},"headers":[],"relativePath":"blog/everyday/redux-toolkit.md","lastUpdated":1679813736000}'),p={name:"blog/everyday/redux-toolkit.md"},o=l(`<h1 id="redux-toolkit-使用技巧" tabindex="-1">Redux Toolkit 使用技巧 <a class="header-anchor" href="#redux-toolkit-使用技巧" aria-hidden="true">#</a></h1><h2 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-hidden="true">#</a></h2><p>Hi，今天和大家分享一些关于使用 Redux Toolkit 的小技巧。</p><p><a href="https://redux-toolkit.js.org/" target="_blank" rel="noreferrer">Redux Toolkit</a> 是一个官方推荐的 Redux 工具集，它可以帮助我们更快捷、更方便地进行 Redux 开发。</p><p>很多同学在使用 RTK 与 Typescript 的时候，可能会遇到一些问题，比如代码重复编写、类型不必要的显示声明等等。</p><p>本文将会分享几个日常开发中使用 RTK 的小技巧，帮助大家减少代码量，使代码更加简洁，提高代码质量。</p><p>希望对你使用 RTK 有所帮助，如果有更好的方案，也欢迎大家在评论区分享自己对 RTK 的使用经验。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>项目遵循 <a href="https://redux.js.org/style-guide/" target="_blank" rel="noreferrer">Redux Style Guide</a> 开发</p><p>相关 dependencies:</p><p><code>&quot;@reduxjs/toolkit&quot;: &quot;^1.9.3&quot;,</code></p><p><code>&quot;react&quot;: &quot;^18.2.0&quot;,</code></p><p><code>&quot;typescript&quot;: &quot;^4.6.0&quot;,</code></p></div><h2 id="提取-slicename" tabindex="-1">提取 sliceName <a class="header-anchor" href="#提取-slicename" aria-hidden="true">#</a></h2><p>创建切片的时候，使用变量指定 slice name，生成 action 类型将会使用它作为前缀。</p><p>这样，当我们在应用中使用 dispatch 触发 action 时，就可以通过 action 类型中的 slice 名称来区分不同的 reducer 函数。并且使代码更加清晰易懂，方便管理。</p><h3 id="before" tabindex="-1">before <a class="header-anchor" href="#before" aria-hidden="true">#</a></h3><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-JibJS" id="tab-j36OCRN" checked="checked"><label for="tab-j36OCRN">features/todos/todosSlice.ts</label></div><div class="blocks"><div class="language-ts active"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark-dimmed has-highlighted-lines"><code><span class="line"><span style="color:#F47067;">export</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">getTodoData</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">createAsyncThunk</span><span style="color:#ADBAC7;">(</span></span>
<span class="line highlighted"><span style="color:#ADBAC7;">  </span><span style="color:#96D0FF;">\`todos/getTodoList\`</span><span style="color:#ADBAC7;">,  </span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F47067;">async</span><span style="color:#ADBAC7;"> (</span><span style="color:#F69D50;">params</span><span style="color:#ADBAC7;">) </span><span style="color:#F47067;">=&gt;</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">//...</span></span>
<span class="line"><span style="color:#ADBAC7;">  },</span></span>
<span class="line"><span style="color:#ADBAC7;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F47067;">export</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">postTodoItem</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span></span>
<span class="line highlighted"><span style="color:#ADBAC7;">  </span><span style="color:#96D0FF;">\`todos/postTodoItem\`</span><span style="color:#ADBAC7;">, </span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#6CB6FF;">async</span><span style="color:#ADBAC7;"> (params) </span><span style="color:#F47067;">=&gt;</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">//...</span></span>
<span class="line"><span style="color:#ADBAC7;">  },</span></span>
<span class="line"><span style="color:#ADBAC7;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#768390;">// more createAsyncThunk ...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">todosSlice</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">createSlice</span><span style="color:#ADBAC7;">({</span></span>
<span class="line highlighted"><span style="color:#ADBAC7;">  name: </span><span style="color:#96D0FF;">&#39;todos&#39;</span><span style="color:#ADBAC7;">, </span></span>
<span class="line"><span style="color:#ADBAC7;">  initialState,</span></span>
<span class="line"><span style="color:#ADBAC7;">  reducers: { </span><span style="color:#768390;">//... },</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#DCBDFB;">extraReducers</span><span style="color:#ADBAC7;">: (</span><span style="color:#F69D50;">builder</span><span style="color:#ADBAC7;">) </span><span style="color:#F47067;">=&gt;</span><span style="color:#ADBAC7;"> { </span><span style="color:#768390;">//... },</span></span>
<span class="line"><span style="color:#ADBAC7;">});</span></span>
<span class="line"></span></code></pre></div></div></div><h3 id="after" tabindex="-1">after <a class="header-anchor" href="#after" aria-hidden="true">#</a></h3><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-L7j-u" id="tab-y0xDLaV" checked="checked"><label for="tab-y0xDLaV">features/todos/todosSlice.ts</label></div><div class="blocks"><div class="language-ts active"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark-dimmed has-focused-lines"><code><span class="line has-focus"><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">sliceName</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&#39;todos&#39;</span><span style="color:#ADBAC7;">;  </span></span>
<span class="line"></span>
<span class="line"><span style="color:#F47067;">export</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">getTodoList</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">createAsyncThunk</span><span style="color:#ADBAC7;">(</span></span>
<span class="line has-focus"><span style="color:#ADBAC7;">  </span><span style="color:#96D0FF;">\`\${</span><span style="color:#ADBAC7;">sliceName</span><span style="color:#96D0FF;">}/getTodoList\`</span><span style="color:#ADBAC7;">, </span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F47067;">async</span><span style="color:#ADBAC7;"> (</span><span style="color:#F69D50;">params</span><span style="color:#ADBAC7;">) </span><span style="color:#F47067;">=&gt;</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">//...</span></span>
<span class="line"><span style="color:#ADBAC7;">  },</span></span>
<span class="line"><span style="color:#ADBAC7;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F47067;">export</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">postTodoItem</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">createAsyncThunk</span><span style="color:#ADBAC7;">(</span></span>
<span class="line has-focus"><span style="color:#ADBAC7;">  </span><span style="color:#96D0FF;">\`\${</span><span style="color:#ADBAC7;">sliceName</span><span style="color:#96D0FF;">}/postTodoItem\`</span><span style="color:#ADBAC7;">,  </span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F47067;">async</span><span style="color:#ADBAC7;"> (</span><span style="color:#F69D50;">params</span><span style="color:#ADBAC7;">) </span><span style="color:#F47067;">=&gt;</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">//...</span></span>
<span class="line"><span style="color:#ADBAC7;">  },</span></span>
<span class="line"><span style="color:#ADBAC7;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#768390;">// 更多的 createAsyncThunk ...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">todosSlice</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">createSlice</span><span style="color:#ADBAC7;">({</span></span>
<span class="line has-focus"><span style="color:#ADBAC7;">  name: sliceName,  </span></span>
<span class="line"><span style="color:#ADBAC7;">  initialState,</span></span>
<span class="line"><span style="color:#ADBAC7;">  reducers: { </span><span style="color:#768390;">//... },</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#DCBDFB;">extraReducers</span><span style="color:#ADBAC7;">: (</span><span style="color:#F69D50;">builder</span><span style="color:#ADBAC7;">) </span><span style="color:#F47067;">=&gt;</span><span style="color:#ADBAC7;"> { </span><span style="color:#768390;">//... },</span></span>
<span class="line"><span style="color:#ADBAC7;">});</span></span>
<span class="line"></span></code></pre></div></div></div><h2 id="提取-selector-function" tabindex="-1">提取 selector function <a class="header-anchor" href="#提取-selector-function" aria-hidden="true">#</a></h2><p>在组件中使用 <code>useSelector</code> hook 从 store 读取数据，它会接受一个选择器函数，我们可以在 slice 文件里提前声明选择器函数。</p><p>比如：将 <code>state =&gt; state.todos</code> 选择器函数从组件中提取出来，声明为 <code>selectTodos</code> ，使得它可以在其他组件中重复使用，避免了代码的重复编写。同时也使得组件的代码更加简洁清晰。</p><h3 id="before-1" tabindex="-1">before <a class="header-anchor" href="#before-1" aria-hidden="true">#</a></h3><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-Yy43b" id="tab-doNovo1" checked="checked"><label for="tab-doNovo1">features/todos/Todos.ts</label></div><div class="blocks"><div class="language-ts active"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark-dimmed has-highlighted-lines"><code><span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> { useAppSelector, useAppDispatch } </span><span style="color:#F47067;">from</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&#39;app/hooks&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F47067;">export</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">function</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">Todos</span><span style="color:#ADBAC7;">() {</span></span>
<span class="line highlighted"><span style="color:#ADBAC7;">  </span><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> { </span><span style="color:#6CB6FF;">todoList</span><span style="color:#ADBAC7;"> } </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">useAppSelector</span><span style="color:#ADBAC7;">(</span><span style="color:#F69D50;">state</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=&gt;</span><span style="color:#ADBAC7;"> state.todos) </span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> (</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// omit rendering logic</span></span>
<span class="line"><span style="color:#ADBAC7;">   )</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span></code></pre></div></div></div><h3 id="after-1" tabindex="-1">after <a class="header-anchor" href="#after-1" aria-hidden="true">#</a></h3><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-ZgDxW" id="tab-05jRjcL" checked="checked"><label for="tab-05jRjcL">features/todos/todosSlice.ts</label><input type="radio" name="group-ZgDxW" id="tab--jtewMs"><label for="tab--jtewMs">features/todos/Todos.ts</label></div><div class="blocks"><div class="language-ts active"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark-dimmed has-focused-lines"><code><span class="line"><span style="color:#768390;">// omit createSlice</span></span>
<span class="line"></span>
<span class="line has-focus"><span style="color:#F47067;">export</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">selectTodos</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> (</span><span style="color:#F69D50;">state</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">RootState</span><span style="color:#ADBAC7;">) </span><span style="color:#F47067;">=&gt;</span><span style="color:#ADBAC7;"> state.todos; </span></span>
<span class="line"></span>
<span class="line"><span style="color:#F47067;">export</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">default</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">todoSlice</span><span style="color:#F69D50;">.</span><span style="color:#ADBAC7;">reducer;</span></span>
<span class="line"></span></code></pre></div><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark-dimmed has-focused-lines"><code><span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> { useAppSelector, useAppDispatch } </span><span style="color:#F47067;">from</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&#39;app/hooks&#39;</span></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> { selectTodos } </span><span style="color:#F47067;">from</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&#39;./todosSlice&#39;</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F47067;">export</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">function</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">Todos</span><span style="color:#ADBAC7;">() {</span></span>
<span class="line has-focus"><span style="color:#ADBAC7;">  </span><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> { </span><span style="color:#6CB6FF;">todoList</span><span style="color:#ADBAC7;"> } </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">useAppSelector</span><span style="color:#ADBAC7;">(selectTodos) </span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">   </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> (</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// omit rendering logic</span></span>
<span class="line"><span style="color:#ADBAC7;">   )</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span></code></pre></div></div></div><h2 id="定义-createasyncthunk-类型" tabindex="-1">定义 createAsyncThunk 类型 <a class="header-anchor" href="#定义-createasyncthunk-类型" aria-hidden="true">#</a></h2><p>当我们使用 createAsyncThunk 的第二个参数 payloadCreator 回调函数里的第二个参数时，使用 <code>thunkAPI.getState</code> 获取数据的时候，TS 类型检查会报 ERROR：<code>类型“unknown”上不存在属性“todos”</code></p><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-b6O_y" id="tab-LPGarWm" checked="checked"><label for="tab-LPGarWm">features/todos/todosSlice.ts</label></div><div class="blocks"><div class="language-ts active"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark-dimmed has-highlighted-lines"><code><span class="line"><span style="color:#F47067;">export</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">deleteTodoItem</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">createAsyncThunk</span><span style="color:#ADBAC7;">(</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#96D0FF;">\`\${</span><span style="color:#ADBAC7;">sliceName</span><span style="color:#96D0FF;">}/deleteTodoItem\`</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F47067;">async</span><span style="color:#ADBAC7;"> (</span><span style="color:#F69D50;">_</span><span style="color:#ADBAC7;">, </span><span style="color:#F69D50;">thunkAPI</span><span style="color:#ADBAC7;">) </span><span style="color:#F47067;">=&gt;</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line highlighted error"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> { </span><span style="color:#6CB6FF;">todos</span><span style="color:#ADBAC7;"> } </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> thunkAPI.</span><span style="color:#DCBDFB;">getState</span><span style="color:#ADBAC7;">(); </span><span style="color:#768390;">// Property &#39;todos&#39; does not exist on type &#39;unknown&#39;.ts(2339)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> { </span><span style="color:#6CB6FF;">result</span><span style="color:#ADBAC7;"> } </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">await</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">apiDeleteTodo</span><span style="color:#ADBAC7;">(todos.id);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> result;</span></span>
<span class="line"><span style="color:#ADBAC7;">  },</span></span>
<span class="line"><span style="color:#ADBAC7;">);</span></span>
<span class="line"></span></code></pre></div></div></div><p>让我们在 <code>createAsyncThunk.d.ts</code> 看下 thunkAPI 类型定义</p><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-PEDdL" id="tab-y6SHi-2" checked="checked"><label for="tab-y6SHi-2">node_modules/@reduxjs/toolkit/dist/createAsyncThunk.d.ts</label></div><div class="blocks"><div class="language-ts active"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark-dimmed has-focused-lines"><code><span class="line"><span style="color:#F47067;">export</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">declare</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">type</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">AsyncThunkPayloadCreator</span><span style="color:#ADBAC7;">&lt;</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F69D50;">Returned</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F69D50;">ThunkArg</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">void</span><span style="color:#ADBAC7;">,</span></span>
<span class="line has-focus"><span style="color:#ADBAC7;">  </span><span style="color:#F69D50;">ThunkApiConfig</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">extends</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">AsyncThunkConfig</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> {}, </span></span>
<span class="line"><span style="color:#ADBAC7;">&gt; </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> (</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F69D50;">arg</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">ThunkArg</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F69D50;">thunkAPI</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">GetThunkAPI</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">ThunkApiConfig</span><span style="color:#ADBAC7;">&gt;,</span></span>
<span class="line"><span style="color:#ADBAC7;">) </span><span style="color:#F47067;">=&gt;</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">AsyncThunkPayloadCreatorReturnValue</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">Returned</span><span style="color:#ADBAC7;">, </span><span style="color:#F69D50;">ThunkApiConfig</span><span style="color:#ADBAC7;">&gt;;</span></span>
<span class="line"></span>
<span class="line has-focus"><span style="color:#F47067;">type</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">AsyncThunkConfig</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> { </span></span>
<span class="line has-focus"><span style="color:#ADBAC7;">  </span><span style="color:#768390;">/** return type for \`thunkApi.getState\` */</span></span>
<span class="line has-focus"><span style="color:#ADBAC7;">  </span><span style="color:#F69D50;">state</span><span style="color:#F47067;">?:</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">unknown</span><span style="color:#ADBAC7;">;</span></span>
<span class="line has-focus"><span style="color:#ADBAC7;">  </span><span style="color:#768390;">/** type for \`thunkApi.dispatch\` */</span></span>
<span class="line has-focus"><span style="color:#ADBAC7;">  </span><span style="color:#F69D50;">dispatch</span><span style="color:#F47067;">?:</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">Dispatch</span><span style="color:#ADBAC7;">;</span></span>
<span class="line has-focus"><span style="color:#ADBAC7;">  </span><span style="color:#768390;">/** type of the \`extra\` argument for the thunk middleware, which will be passed in as \`thunkApi.extra\` */</span></span>
<span class="line has-focus"><span style="color:#ADBAC7;">  </span><span style="color:#F69D50;">extra</span><span style="color:#F47067;">?:</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">unknown</span><span style="color:#ADBAC7;">;</span></span>
<span class="line has-focus"><span style="color:#ADBAC7;">  </span><span style="color:#768390;">/** type to be passed into \`rejectWithValue\`&#39;s first argument that will end up on \`rejectedAction.payload\` */</span></span>
<span class="line has-focus"><span style="color:#ADBAC7;">  </span><span style="color:#F69D50;">rejectValue</span><span style="color:#F47067;">?:</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">unknown</span><span style="color:#ADBAC7;">;</span></span>
<span class="line has-focus"><span style="color:#ADBAC7;">  </span><span style="color:#768390;">/** return type of the \`serializeError\` option callback */</span></span>
<span class="line has-focus"><span style="color:#ADBAC7;">  </span><span style="color:#F69D50;">serializedErrorType</span><span style="color:#F47067;">?:</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">unknown</span><span style="color:#ADBAC7;">;</span></span>
<span class="line has-focus"><span style="color:#ADBAC7;">  </span><span style="color:#768390;">/** type to be returned from the \`getPendingMeta\` option callback &amp; merged into \`pendingAction.meta\` */</span></span>
<span class="line has-focus"><span style="color:#ADBAC7;">  </span><span style="color:#F69D50;">pendingMeta</span><span style="color:#F47067;">?:</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">unknown</span><span style="color:#ADBAC7;">;</span></span>
<span class="line has-focus"><span style="color:#ADBAC7;">  </span><span style="color:#768390;">/** type to be passed into the second argument of \`fulfillWithValue\` to finally be merged into \`fulfilledAction.meta\` */</span></span>
<span class="line has-focus"><span style="color:#ADBAC7;">  </span><span style="color:#F69D50;">fulfilledMeta</span><span style="color:#F47067;">?:</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">unknown</span><span style="color:#ADBAC7;">;</span></span>
<span class="line has-focus"><span style="color:#ADBAC7;">  </span><span style="color:#768390;">/** type to be passed into the second argument of \`rejectWithValue\` to finally be merged into \`rejectedAction.meta\` */</span></span>
<span class="line has-focus"><span style="color:#ADBAC7;">  </span><span style="color:#F69D50;">rejectedMeta</span><span style="color:#F47067;">?:</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">unknown</span><span style="color:#ADBAC7;">;</span></span>
<span class="line has-focus"><span style="color:#ADBAC7;">};</span></span>
<span class="line"></span></code></pre></div></div></div><p>我们可以看见除了 <code>dispatch</code> 定义了具体类型 <code>Dispatch</code>，其他都是 <code>unknown | undefined</code> 。</p><p>所以如果你想从 payloadCreator 中使用它们，需要显示定义 thunkApi 泛型参数，因为这些参数的类型无法推断出来。</p><p>此外，<strong>由于 TS 无法混合显式和推断泛型参数</strong>，还需要定义 payloadCreator 的 Return type 和 First argument 泛型参数。</p><p>比如：你可以传入泛型参数 <code>&lt;boolean, void, { state: RootState }&gt; </code></p><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-S-aV2" id="tab-gTPzA4G" checked="checked"><label for="tab-gTPzA4G">features/todos/todosSlice.ts</label></div><div class="blocks"><div class="language-ts active"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark-dimmed has-focused-lines"><code><span class="line"><span style="color:#F47067;">export</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">deleteTodoItem</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> createAsyncThunk</span><span style="color:#F47067;">&lt;</span></span>
<span class="line has-focus"><span style="color:#ADBAC7;">  boolean, </span></span>
<span class="line has-focus"><span style="color:#ADBAC7;">  </span><span style="color:#F47067;">void</span><span style="color:#ADBAC7;">,</span></span>
<span class="line has-focus"><span style="color:#ADBAC7;">  { </span><span style="color:#F69D50;">state</span><span style="color:#ADBAC7;">: RootState }</span></span>
<span class="line"><span style="color:#F47067;">&gt;</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">\`\${</span><span style="color:#ADBAC7;">sliceName</span><span style="color:#96D0FF;">}/deleteTodoItem\`</span><span style="color:#ADBAC7;">, </span><span style="color:#F47067;">async</span><span style="color:#ADBAC7;"> (</span><span style="color:#F69D50;">_</span><span style="color:#ADBAC7;">, { </span><span style="color:#F69D50;">getState</span><span style="color:#ADBAC7;"> }) </span><span style="color:#F47067;">=&gt;</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> { </span><span style="color:#6CB6FF;">todos</span><span style="color:#ADBAC7;"> } </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">getState</span><span style="color:#ADBAC7;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> { </span><span style="color:#6CB6FF;">result</span><span style="color:#ADBAC7;"> } </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">await</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">apiDeleteTodo</span><span style="color:#ADBAC7;">(todos.id);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> result;</span></span>
<span class="line"><span style="color:#ADBAC7;">});</span></span>
<span class="line"></span></code></pre></div></div></div><p>如果你觉得这样写很麻烦，<strong>因为 TypeScript 可以推断出 Return type 和 First argument 类型</strong>，那么我们只需要显式定义 thunkApi.getState 方法的类型即可，<strong>无需再显式定义这两个类型</strong>。</p><p>为了解决这个问题，我们可以使用 Type Assertions 中的 <code>as</code> 关键字，从而避免了重复定义类型。</p><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-9YvJL" id="tab-pcFyEmE" checked="checked"><label for="tab-pcFyEmE">features/todos/todosSlice.ts</label></div><div class="blocks"><div class="language-ts active"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark-dimmed has-focused-lines"><code><span class="line has-focus"><span style="color:#768390;">// or </span></span>
<span class="line"><span style="color:#F47067;">export</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">deleteTodoItem</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">createAsyncThunk</span><span style="color:#ADBAC7;">(</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#96D0FF;">\`\${</span><span style="color:#ADBAC7;">sliceName</span><span style="color:#96D0FF;">}/deleteTodoItem\`</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F47067;">async</span><span style="color:#ADBAC7;"> (</span><span style="color:#F69D50;">_</span><span style="color:#ADBAC7;">, { </span><span style="color:#F69D50;">getState</span><span style="color:#ADBAC7;"> }) </span><span style="color:#F47067;">=&gt;</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line has-focus"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> { </span><span style="color:#6CB6FF;">todos</span><span style="color:#ADBAC7;"> } </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">getState</span><span style="color:#ADBAC7;">() </span><span style="color:#F47067;">as</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">RootState</span><span style="color:#ADBAC7;">; </span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> { </span><span style="color:#6CB6FF;">result</span><span style="color:#ADBAC7;"> } </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">await</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">apiDeleteTodo</span><span style="color:#ADBAC7;">(todos.id);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> result;</span></span>
<span class="line"><span style="color:#ADBAC7;">  },</span></span>
<span class="line"><span style="color:#ADBAC7;">);</span></span>
<span class="line"></span></code></pre></div></div></div><p>如果你觉得这样就解决了问题，那么当你每次调用大量的 createAsyncThunk 时，会发现每次显式声明类型都很麻烦，这应该由 TypeScript 类型推断来完成。</p><p>作为开发者，我们应该尽可能的<strong>避免强制转换类型</strong>，因为这正是 TypeScript 的使用意义之一，让语言自动推断类型，同时也避免了循环依赖的问题。</p><p>因此，我们可以使用 TypeScript 的<a href="https://www.typescriptlang.org/docs/handbook/declaration-merging.html#module-augmentation" target="_blank" rel="noreferrer">模组扩充</a>来解决这个问题。通过使用模块增强功能，我们可以将默认状态分配给 AsyncThunkConfig.state，这样在稍后调用 <code>getState()</code> 时就能返回正确的类型。</p><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-Tinvc" id="tab-W7mK87B" checked="checked"><label for="tab-W7mK87B">app/store.ts</label></div><div class="blocks"><div class="language-ts active"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark-dimmed"><code><span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> { AsyncThunk, AsyncThunkOptions, AsyncThunkPayloadCreator, Dispatch } </span><span style="color:#F47067;">from</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&#39;@reduxjs/toolkit&#39;</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#768390;">// omit configureStore</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F47067;">declare</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">module</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&quot;@reduxjs/toolkit&quot;</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">type</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">AsyncThunkConfig</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#F69D50;">state</span><span style="color:#F47067;">?:</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">unknown</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#F69D50;">dispatch</span><span style="color:#F47067;">?:</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">Dispatch</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#F69D50;">extra</span><span style="color:#F47067;">?:</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">unknown</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#F69D50;">rejectValue</span><span style="color:#F47067;">?:</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">unknown</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#F69D50;">serializedErrorType</span><span style="color:#F47067;">?:</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">unknown</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">    };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">function</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">createAsyncThunk</span><span style="color:#ADBAC7;">&lt;</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#F69D50;">Returned</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#F69D50;">ThunkArg</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">void</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#F69D50;">ThunkApiConfig</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">extends</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">AsyncThunkConfig</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> { </span><span style="color:#F69D50;">state</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">RootState</span><span style="color:#ADBAC7;"> } </span><span style="color:#768390;">// here is the magic line</span></span>
<span class="line"><span style="color:#ADBAC7;">    &gt;(</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#F69D50;">typePrefix</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">string</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#F69D50;">payloadCreator</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">AsyncThunkPayloadCreator</span><span style="color:#ADBAC7;">&lt;</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#F69D50;">Returned</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#F69D50;">ThunkArg</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#F69D50;">ThunkApiConfig</span></span>
<span class="line"><span style="color:#ADBAC7;">        &gt;,</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#F69D50;">options</span><span style="color:#F47067;">?:</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">AsyncThunkOptions</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">ThunkArg</span><span style="color:#ADBAC7;">, </span><span style="color:#F69D50;">ThunkApiConfig</span><span style="color:#ADBAC7;">&gt;,</span></span>
<span class="line"><span style="color:#ADBAC7;">    )</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">AsyncThunk</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">Returned</span><span style="color:#ADBAC7;">, </span><span style="color:#F69D50;">ThunkArg</span><span style="color:#ADBAC7;">, </span><span style="color:#F69D50;">ThunkApiConfig</span><span style="color:#ADBAC7;">&gt;;</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F47067;">export</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">default</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">store;</span></span>
<span class="line"></span></code></pre></div></div></div><p>这样就不需要使用 <code>createAsyncThunk</code> 去显式声明类型。</p><p>这是 RTK 1.9 之前的解决办法，Redux 官方也注意到这一点，于是提供了 <code>createAsyncThunk.withTypes&lt;&gt;()</code></p><h2 id="定义预类型-createasyncthunk" tabindex="-1">定义预类型 <code>createAsyncThunk</code> <a class="header-anchor" href="#定义预类型-createasyncthunk" aria-hidden="true">#</a></h2><p>从RTK 1.9开始，你可以调用 <code>createAsyncThunk.withTypes&lt;&gt;()</code> 并传入一个包含 AsyncThunkConfig 中任何字段的字段名和类型的对象。</p><p>这让你可以<strong>一次设置这些类型</strong>，从而无需在每次调用 createAsyncThunk 时<strong>重复定义</strong>它们。</p><p><strong>usage:</strong></p><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-NrWfU" id="tab-BbfWNWV" checked="checked"><label for="tab-BbfWNWV">app/store.util.ts</label><input type="radio" name="group-NrWfU" id="tab-P-ocCg8"><label for="tab-P-ocCg8">features/todos/todosSlice.ts</label></div><div class="blocks"><div class="language-ts active"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark-dimmed"><code><span class="line"><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">createAppAsyncThunk</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> createAsyncThunk.</span><span style="color:#DCBDFB;">withTypes</span><span style="color:#ADBAC7;">&lt;{</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F69D50;">state</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">RootState</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F69D50;">dispatch</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">AppDispatch</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#768390;">// other fields type</span></span>
<span class="line"><span style="color:#ADBAC7;">}&gt;();</span></span>
<span class="line"></span></code></pre></div><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark-dimmed"><code><span class="line"><span style="color:#F47067;">export</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">deleteTodoItem</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">createAsyncThunk</span><span style="color:#ADBAC7;">(</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#96D0FF;">\`\${</span><span style="color:#ADBAC7;">sliceName</span><span style="color:#96D0FF;">}/deleteTodoItem\`</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F47067;">async</span><span style="color:#ADBAC7;"> (</span><span style="color:#F69D50;">_</span><span style="color:#ADBAC7;">, { </span><span style="color:#F69D50;">getState</span><span style="color:#ADBAC7;"> }) </span><span style="color:#F47067;">=&gt;</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> { </span><span style="color:#6CB6FF;">todos</span><span style="color:#ADBAC7;"> } </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">getState</span><span style="color:#ADBAC7;">();</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> { </span><span style="color:#6CB6FF;">result</span><span style="color:#ADBAC7;"> } </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">await</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">apiDeleteTodo</span><span style="color:#ADBAC7;">(todos.id);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> result;</span></span>
<span class="line"><span style="color:#ADBAC7;">  },</span></span>
<span class="line"><span style="color:#ADBAC7;">);</span></span>
<span class="line"></span></code></pre></div></div></div><p>这样代码看起来就简洁多了 😎</p><h2 id="使用-addmatcher-处理重复状态修改" tabindex="-1">使用 addMatcher 处理重复状态修改 <a class="header-anchor" href="#使用-addmatcher-处理重复状态修改" aria-hidden="true">#</a></h2><p>简单回顾下用法：</p><p><code>builder.addCase</code>: 处理<strong>单个精确</strong>的 action type。</p><p><code>builder.addMatcher</code>: 根据传入的第一个参数（匹配器函数），处理<strong>函数匹配</strong>的 action type。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>所有 builder.addMatcher 的调用都必须放在任何 builder.addCase 之后调用</p></div><p>接下来，举一个例子：</p><p>当我们在获取 TodoList 发起异步请求时</p><p><code>&#39;todos/getTodoList&#39;</code> 将生成这些 action types:</p><ul><li>pending: <code>&#39;todos/getTodoList/pending&#39;</code></li><li>fulfilled: <code>&#39;todos/getTodoList/fulfilled&#39;</code></li><li>rejected: <code>&#39;todos/getTodoList/rejected&#39;</code></li></ul><p>我们需要在 pending 阶段将 <code>loading</code> 状态改成 <code>true</code>，fulfilled 和 rejected 将 <code>loading</code> 状态改成 <code>false</code>。</p><h3 id="使用-addcase" tabindex="-1">使用 addCase <a class="header-anchor" href="#使用-addcase" aria-hidden="true">#</a></h3><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-oEhKE" id="tab-ucv3dd8" checked="checked"><label for="tab-ucv3dd8">features/todos/todosSlice.ts</label></div><div class="blocks"><div class="language-ts active"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark-dimmed has-highlighted-lines"><code><span class="line"><span style="color:#F47067;">export</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">getTodoList</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">createAppAsyncThunk</span><span style="color:#ADBAC7;">(</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#96D0FF;">\`\${</span><span style="color:#ADBAC7;">sliceName</span><span style="color:#96D0FF;">}/getTodoList\`</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F47067;">async</span><span style="color:#ADBAC7;"> () </span><span style="color:#F47067;">=&gt;</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> { </span><span style="color:#6CB6FF;">result</span><span style="color:#ADBAC7;"> } </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">await</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">apiGetTodoList</span><span style="color:#ADBAC7;">();</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> result;</span></span>
<span class="line"><span style="color:#ADBAC7;">  }</span></span>
<span class="line"><span style="color:#ADBAC7;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F47067;">export</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">postTodoItem</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">createAppAsyncThunk</span><span style="color:#ADBAC7;">(</span><span style="color:#768390;">/* omit logic */</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F47067;">export</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">putTodoItem</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">createAppAsyncThunk</span><span style="color:#ADBAC7;">(</span><span style="color:#768390;">/* omit logic */</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F47067;">export</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">deleteTodoItem</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">createAppAsyncThunk</span><span style="color:#ADBAC7;">(</span><span style="color:#768390;">/* omit logic */</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F47067;">export</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">todosSlice</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">createSlice</span><span style="color:#ADBAC7;">({</span></span>
<span class="line"><span style="color:#ADBAC7;">  name: sliceName,</span></span>
<span class="line"><span style="color:#ADBAC7;">  initialState,</span></span>
<span class="line"><span style="color:#ADBAC7;">  reducers: {</span><span style="color:#768390;">/* omit */</span><span style="color:#ADBAC7;">},</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#DCBDFB;">extraReducers</span><span style="color:#ADBAC7;">: (</span><span style="color:#F69D50;">builder</span><span style="color:#ADBAC7;">) </span><span style="color:#F47067;">=&gt;</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">    builder</span></span>
<span class="line highlighted"><span style="color:#ADBAC7;">      .</span><span style="color:#DCBDFB;">addCase</span><span style="color:#ADBAC7;">(getTodoList.pending, (</span><span style="color:#F69D50;">state</span><span style="color:#ADBAC7;">) </span><span style="color:#F47067;">=&gt;</span><span style="color:#ADBAC7;"> { </span></span>
<span class="line highlighted"><span style="color:#ADBAC7;">        state.loading </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">true</span><span style="color:#ADBAC7;">; </span></span>
<span class="line highlighted"><span style="color:#ADBAC7;">      })</span></span>
<span class="line"><span style="color:#ADBAC7;">      .</span><span style="color:#DCBDFB;">addCase</span><span style="color:#ADBAC7;">(getTodoList.fulfilled, (</span><span style="color:#F69D50;">state</span><span style="color:#ADBAC7;">, </span><span style="color:#F69D50;">action</span><span style="color:#ADBAC7;">) </span><span style="color:#F47067;">=&gt;</span><span style="color:#ADBAC7;"> (</span><span style="color:#768390;">/* omit success logic */</span><span style="color:#ADBAC7;">);</span></span>
<span class="line highlighted"><span style="color:#ADBAC7;">      .</span><span style="color:#DCBDFB;">addCase</span><span style="color:#ADBAC7;">(getTodoList.rejected, (</span><span style="color:#F69D50;">state</span><span style="color:#ADBAC7;">) </span><span style="color:#F47067;">=&gt;</span><span style="color:#ADBAC7;"> { </span></span>
<span class="line highlighted"><span style="color:#ADBAC7;">        state.loading </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">false</span><span style="color:#ADBAC7;">;</span></span>
<span class="line highlighted"><span style="color:#ADBAC7;">      })</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#ADBAC7;">      .</span><span style="color:#DCBDFB;">addCase</span><span style="color:#ADBAC7;">(postTodoItem.pending, (</span><span style="color:#F69D50;">state</span><span style="color:#ADBAC7;">) </span><span style="color:#F47067;">=&gt;</span><span style="color:#ADBAC7;"> { </span></span>
<span class="line highlighted"><span style="color:#ADBAC7;">        state.loading </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">true</span><span style="color:#ADBAC7;">;</span></span>
<span class="line highlighted"><span style="color:#ADBAC7;">      })</span></span>
<span class="line"><span style="color:#ADBAC7;">      .</span><span style="color:#DCBDFB;">addCase</span><span style="color:#ADBAC7;">(postTodoItem.fulfilled, (</span><span style="color:#F69D50;">state</span><span style="color:#ADBAC7;">, </span><span style="color:#F69D50;">action</span><span style="color:#ADBAC7;">) </span><span style="color:#F47067;">=&gt;</span><span style="color:#ADBAC7;"> (</span><span style="color:#768390;">/* omit success logic */</span><span style="color:#ADBAC7;">);</span></span>
<span class="line highlighted"><span style="color:#ADBAC7;">      .</span><span style="color:#DCBDFB;">addCase</span><span style="color:#ADBAC7;">(postTodoItem.rejected, (</span><span style="color:#F69D50;">state</span><span style="color:#ADBAC7;">) </span><span style="color:#F47067;">=&gt;</span><span style="color:#ADBAC7;"> { </span></span>
<span class="line highlighted"><span style="color:#ADBAC7;">        state.loading </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">false</span><span style="color:#ADBAC7;">;</span></span>
<span class="line highlighted"><span style="color:#ADBAC7;">      })</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#ADBAC7;">      .</span><span style="color:#DCBDFB;">addCase</span><span style="color:#ADBAC7;">(putTodoItem.pending, (</span><span style="color:#F69D50;">state</span><span style="color:#ADBAC7;">) </span><span style="color:#F47067;">=&gt;</span><span style="color:#ADBAC7;"> { </span></span>
<span class="line highlighted"><span style="color:#ADBAC7;">        state.loading </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">true</span><span style="color:#ADBAC7;">;</span></span>
<span class="line highlighted"><span style="color:#ADBAC7;">      })</span></span>
<span class="line"><span style="color:#ADBAC7;">      .</span><span style="color:#DCBDFB;">addCase</span><span style="color:#ADBAC7;">(putTodoItem.fulfilled, (</span><span style="color:#F69D50;">state</span><span style="color:#ADBAC7;">, </span><span style="color:#F69D50;">action</span><span style="color:#ADBAC7;">) </span><span style="color:#F47067;">=&gt;</span><span style="color:#ADBAC7;"> (</span><span style="color:#768390;">/* omit success logic */</span><span style="color:#ADBAC7;">);</span></span>
<span class="line highlighted"><span style="color:#ADBAC7;">      .</span><span style="color:#DCBDFB;">addCase</span><span style="color:#ADBAC7;">(putTodoItem.rejected, (</span><span style="color:#F69D50;">state</span><span style="color:#ADBAC7;">) </span><span style="color:#F47067;">=&gt;</span><span style="color:#ADBAC7;"> { </span></span>
<span class="line highlighted"><span style="color:#ADBAC7;">        state.loading </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">false</span><span style="color:#ADBAC7;">;</span></span>
<span class="line highlighted"><span style="color:#ADBAC7;">      })</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#ADBAC7;">      .</span><span style="color:#DCBDFB;">addCase</span><span style="color:#ADBAC7;">(deleteTodoItem.pending, (</span><span style="color:#F69D50;">state</span><span style="color:#ADBAC7;">) </span><span style="color:#F47067;">=&gt;</span><span style="color:#ADBAC7;"> { </span></span>
<span class="line highlighted"><span style="color:#ADBAC7;">        state.loading </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">true</span><span style="color:#ADBAC7;">;</span></span>
<span class="line highlighted"><span style="color:#ADBAC7;">      })</span></span>
<span class="line"><span style="color:#ADBAC7;">      .</span><span style="color:#DCBDFB;">addCase</span><span style="color:#ADBAC7;">(deleteTodoItem.fulfilled, (</span><span style="color:#F69D50;">state</span><span style="color:#ADBAC7;">, </span><span style="color:#F69D50;">action</span><span style="color:#ADBAC7;">) </span><span style="color:#F47067;">=&gt;</span><span style="color:#ADBAC7;"> (</span><span style="color:#768390;">/* omit success logic */</span><span style="color:#ADBAC7;">);</span></span>
<span class="line highlighted"><span style="color:#ADBAC7;">      .</span><span style="color:#DCBDFB;">addCase</span><span style="color:#ADBAC7;">(deleteTodoItem.rejected, (</span><span style="color:#F69D50;">state</span><span style="color:#ADBAC7;">) </span><span style="color:#F47067;">=&gt;</span><span style="color:#ADBAC7;"> { </span></span>
<span class="line highlighted"><span style="color:#ADBAC7;">        state.loading </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">false</span><span style="color:#ADBAC7;">;</span></span>
<span class="line highlighted"><span style="color:#ADBAC7;">      })</span></span>
<span class="line"><span style="color:#ADBAC7;">  },</span></span>
<span class="line"><span style="color:#ADBAC7;">});</span></span>
<span class="line"></span></code></pre></div></div></div><p>可以从代码高亮看见，我们在所有 action type 的 pending, fulfilled 和 rejected 阶段，都对 <code>state.loading</code> 进行了状态修改，导致存在大量重复状态修改代码。</p><p>这里我们就可以使用 <code>addMatcher</code> 来匹配相同的阶段，并创建 <code>isPendingAction</code>, <code>isFulfilledAction</code>, <code>isRejectedAction</code> 三个 matcher function 来处理。</p><h3 id="使用-addmatcher" tabindex="-1">使用 addMatcher <a class="header-anchor" href="#使用-addmatcher" aria-hidden="true">#</a></h3><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-0tDW6" id="tab-J67KuLs" checked="checked"><label for="tab-J67KuLs">features/todos/todosSlice.ts</label><input type="radio" name="group-0tDW6" id="tab-AVnrnqM"><label for="tab-AVnrnqM">app/store.util.ts</label></div><div class="blocks"><div class="language-ts active"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark-dimmed has-focused-lines"><code><span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> { createSlice, createAsyncThunk } </span><span style="color:#F47067;">from</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&#39;@reduxjs/toolkit&#39;</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> { isPendingAction, isFulfilledAction, isRejectedAction } </span><span style="color:#F47067;">from</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&#39;app/store.util&#39;</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F47067;">export</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">todosSlice</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">createSlice</span><span style="color:#ADBAC7;">({</span></span>
<span class="line"><span style="color:#ADBAC7;">  name: sliceName,</span></span>
<span class="line"><span style="color:#ADBAC7;">  initialState,</span></span>
<span class="line"><span style="color:#ADBAC7;">  reducers: {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// omit</span></span>
<span class="line"><span style="color:#ADBAC7;">  },</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#DCBDFB;">extraReducers</span><span style="color:#ADBAC7;">: (</span><span style="color:#F69D50;">builder</span><span style="color:#ADBAC7;">) </span><span style="color:#F47067;">=&gt;</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">    builder</span></span>
<span class="line"><span style="color:#ADBAC7;">      .</span><span style="color:#DCBDFB;">addCase</span><span style="color:#ADBAC7;">(getTodoList.fulfilled, (</span><span style="color:#F69D50;">state</span><span style="color:#ADBAC7;">, </span><span style="color:#F69D50;">action</span><span style="color:#ADBAC7;">) </span><span style="color:#F47067;">=&gt;</span><span style="color:#ADBAC7;"> (</span><span style="color:#768390;">/* omit success logic */</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"><span style="color:#ADBAC7;">      .</span><span style="color:#DCBDFB;">addCase</span><span style="color:#ADBAC7;">(postTodoItem.fulfilled, (</span><span style="color:#F69D50;">state</span><span style="color:#ADBAC7;">, </span><span style="color:#F69D50;">action</span><span style="color:#ADBAC7;">) </span><span style="color:#F47067;">=&gt;</span><span style="color:#ADBAC7;"> (</span><span style="color:#768390;">/* omit success logic */</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"><span style="color:#ADBAC7;">      .</span><span style="color:#DCBDFB;">addCase</span><span style="color:#ADBAC7;">(putTodoItem.fulfilled, (</span><span style="color:#F69D50;">state</span><span style="color:#ADBAC7;">, </span><span style="color:#F69D50;">action</span><span style="color:#ADBAC7;">) </span><span style="color:#F47067;">=&gt;</span><span style="color:#ADBAC7;"> (</span><span style="color:#768390;">/* omit success logic */</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"><span style="color:#ADBAC7;">      .</span><span style="color:#DCBDFB;">addCase</span><span style="color:#ADBAC7;">(deleteTodoItem.fulfilled, (</span><span style="color:#F69D50;">state</span><span style="color:#ADBAC7;">, </span><span style="color:#F69D50;">action</span><span style="color:#ADBAC7;">) </span><span style="color:#F47067;">=&gt;</span><span style="color:#ADBAC7;"> (</span><span style="color:#768390;">/* omit success logic */</span><span style="color:#ADBAC7;">);</span></span>
<span class="line has-focus"><span style="color:#ADBAC7;">      .</span><span style="color:#DCBDFB;">addMatcher</span><span style="color:#ADBAC7;">(isPendingAction, (</span><span style="color:#F69D50;">state</span><span style="color:#ADBAC7;">) </span><span style="color:#F47067;">=&gt;</span><span style="color:#ADBAC7;"> { </span></span>
<span class="line has-focus"><span style="color:#ADBAC7;">        state.loading </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">true</span><span style="color:#ADBAC7;">;</span></span>
<span class="line has-focus"><span style="color:#ADBAC7;">      })</span></span>
<span class="line has-focus"><span style="color:#ADBAC7;">      .</span><span style="color:#DCBDFB;">addMatcher</span><span style="color:#ADBAC7;">(isFulfilledAction </span><span style="color:#F47067;">||</span><span style="color:#ADBAC7;"> isRejectedAction, (</span><span style="color:#F69D50;">state</span><span style="color:#ADBAC7;">) </span><span style="color:#F47067;">=&gt;</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line has-focus"><span style="color:#ADBAC7;">        state.loading </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">false</span><span style="color:#ADBAC7;">;</span></span>
<span class="line has-focus"><span style="color:#ADBAC7;">      });</span></span>
<span class="line"><span style="color:#ADBAC7;">  },</span></span>
<span class="line"><span style="color:#ADBAC7;">});</span></span>
<span class="line"></span></code></pre></div><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark-dimmed"><code><span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> { AnyAction } </span><span style="color:#F47067;">from</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&#39;@reduxjs/toolkit&#39;</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F47067;">export</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">isPendingAction</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> (</span><span style="color:#F69D50;">action</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">AnyAction</span><span style="color:#ADBAC7;">) </span><span style="color:#F47067;">=&gt;</span><span style="color:#ADBAC7;"> action.type.</span><span style="color:#DCBDFB;">endsWith</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&#39;/pending&#39;</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"><span style="color:#F47067;">export</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">isFulfilledAction</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> (</span><span style="color:#F69D50;">action</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">AnyAction</span><span style="color:#ADBAC7;">) </span><span style="color:#F47067;">=&gt;</span><span style="color:#ADBAC7;"> action.type.</span><span style="color:#DCBDFB;">endsWith</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&#39;/fulfilled&#39;</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"><span style="color:#F47067;">export</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">isRejectedAction</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> (</span><span style="color:#F69D50;">action</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">AnyAction</span><span style="color:#ADBAC7;">) </span><span style="color:#F47067;">=&gt;</span><span style="color:#ADBAC7;"> action.type.</span><span style="color:#DCBDFB;">endsWith</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&#39;/rejected&#39;</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"></span></code></pre></div></div></div><p>这样代码是不是就清晰多了 😎</p><h2 id="最后" tabindex="-1">最后 <a class="header-anchor" href="#最后" aria-hidden="true">#</a></h2><p>希望对你使用 RTK 有所帮助，如果有更好的方案，也欢迎大家在评论区分享自己对 RTK 的使用经验。</p><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-hidden="true">#</a></h2><blockquote><p><a href="https://redux-toolkit.js.org/" target="_blank" rel="noreferrer">https://redux-toolkit.js.org/</a></p><p><a href="https://github.com/Tencent/tdesign-react-starter" target="_blank" rel="noreferrer">https://github.com/Tencent/tdesign-react-starter</a></p><p><a href="https://stackoverflow.com/questions/64793504/cannot-set-getstate-type-to-rootstate-in-createasyncthunk" target="_blank" rel="noreferrer">https://stackoverflow.com/questions/64793504/cannot-set-getstate-type-to-rootstate-in-createasyncthunk</a></p><p><a href="https://github.com/reduxjs/redux-toolkit/issues/486" target="_blank" rel="noreferrer">https://github.com/reduxjs/redux-toolkit/issues/486</a></p></blockquote>`,68),e=[o];function t(c,r,A,y,i,D){return a(),n("div",null,e)}const B=s(p,[["render",t]]);export{C as __pageData,B as default};
